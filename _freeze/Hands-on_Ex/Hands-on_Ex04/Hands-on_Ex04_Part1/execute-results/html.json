{
  "hash": "a64aec314e0fb12c43cbce24f82cbf7a",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 4 Part 1: Visualising Distribution\"\nauthor: \"Liaw Ying Ting, Celin\"\ndate: 7 May 2025\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n\n# 4.1 Learning Outcome\n\nIn this chapter, we will be learning ridgeline plot and raincloud plot using ggplot2 and its extensions.\n\n# 4.2 Getting Started\n\n## 4.2.1 Installing and loading the packages\n\nThe following R Packages will be used:\n\n-   ggridges - a ggplot2 extension designed for plotting ridgeline plots\n\n-   ggdist - a ggplot2 extension designed for visualising distribution and uncertainty\n\n-   tidyverse - a family of R packages to meet the modern data science and visual communication needs\n\n-   ggthemes - a ggplot extension that provides the user additional themes, scales and geoms for the ggplots package\n\n-   colorspace - an R package that provides a broad toolbox for selecting individual color or color palettes\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(ggdist, ggridges, ggthemes,\n               colorspace, tidyverse)\n```\n:::\n\n\n\n## 4.2.2 Importing Data\n\nFor the purpose of this exercise, Exam_data.csv will be used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nexam <- read_csv(\"Exam_data.csv\")\n```\n:::\n\n\n\n# 4.3 Visualising Distribution with Ridgeline Plot\n\nRidgeline plot is a data visualisation technique for revealing the distribution of a numeric value for several groups. Distribution can be represented using histograms or density plots, all aligned to the same horizontal scale and presented with a slight overlap.\n\nRidgeline plots make sense when:\n\n-   number of groups to represent is medium to high\n\n-   Classic window separation would take too much space\n\n-   there is a clear pattern in the result\n\n## 4.3.1 Plotting ridgeline graph: ggridges method\n\nGgridges provides two main geom to plot gridgeline plots: [geom_ridgeline()](https://wilkelab.org/ggridges/reference/geom_ridgeline.html) and [geom_density_ridges()](https://wilkelab.org/ggridges/reference/geom_density_ridges.html). The first one uses height values directly to draw the ridgelines and the second one estimates data densities and draw them using ridgelines.\n\n::: panel-tabset\n### The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_Part1_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n\n### The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS)) +\n  geom_density_ridges(\n    scale = 3,\n    rel_min_height = 0.01,\n    bandwidth = 3.4,\n    fill = lighten(\"#7097BB\", .3),\n    color = \"white\"\n  ) +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n    ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n## 4.3.2 Varying fill colors along the x axis\n\nTo fill the area under a ridgeline with colors that vary along the x axis, we can use [geom_ridgeline_gradient()](https://wilkelab.org/ggridges/reference/geom_density_ridges.html) or [geom_density_ridges()](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html). Both geoms work just like <code style=\"color: purple;\">geom_ridgeline()</code> and <code style=\"color: purple;\">geom_density_ridgeline()</code> except that they allow for varying fill colors. It does not allow for alpha transparency in the fill. Only can have changing fill colors or transparency, but not both.\n\n::: panel-tabset\n### The plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_Part1_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\n\n### The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = ENGLISH, \n           y = CLASS,\n           fill = stat(x))) +\n  geom_density_ridges_gradient(\n    scale = 3,\n    rel_min_height = 0.01) +\n  scale_fill_viridis_c(name = \"Temp. [F]\",\n                       option = \"C\") +\n  scale_x_continuous(\n    name = \"English grades\",\n    expand = c(0, 0)\n  ) +\n  scale_y_discrete(name = NULL, expand = expansion(add = c(0.2, 2.6))) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n## 4.3.3 Mapping the probabilities directly onto colour\n\nThe ggridges package has a stat function called [stat_density_ridges()](https://wilkelab.org/ggridges/reference/stat_density_ridges.html) and is used to replace [stat_density()](https://ggplot2.tidyverse.org/reference/geom_density.html) of ggplot2.\n\nThe figure below is plotted by mapping the probabilities calculated by using <code style=\"color: purple;\">stat(ecdf)</code> which represent the empirical cumulative density function for the distribution of English score.\n\n::: panel-tabset\n### The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_Part1_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n:::\n\n\n\n### The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = 0.5 - abs(0.5-stat(ecdf)))) +\n  stat_density_ridges(geom = \"density_ridges_gradient\", \n                      calc_ecdf = TRUE) +\n  scale_fill_viridis_c(name = \"Tail probability\",\n                       direction = -1) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\nThe argument <code style=\"color: purple;\">calc_ecdf = TRUE</code> has to be added in <code style=\"color: purple;\">stat_density_ridges()</code>.\n\n## 4.3.4 Ridgeline plots with quantile lines\n\nBy using [geom_density_ridges_gradient()](https://wilkelab.org/ggridges/reference/geom_ridgeline_gradient.html) the ridgeline plot can be colored by quantile, using calculated <code style=\"color: purple;\">stat(quantile\\_</code> aesthetic as shown in the figure below.\n\n::: panel-tabset\n### The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_Part1_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n\n### The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = 4,\n    quantile_lines = TRUE) +\n  scale_fill_viridis_d(name = \"Quartiles\") +\n  theme_ridges()\n```\n:::\n\n\n:::\n\nInstead of using number to define the quantiles, we can also specify quantiles by cut points such as 2.5% and 97.5% tails to colour the ridgeline plot as shown in the figure below.\n\n::: panel-tabset\n### The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_Part1_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n### The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam,\n       aes(x = ENGLISH, \n           y = CLASS, \n           fill = factor(stat(quantile))\n           )) +\n  stat_density_ridges(\n    geom = \"density_ridges_gradient\",\n    calc_ecdf = TRUE, \n    quantiles = c(0.025, 0.975)\n    ) +\n  scale_fill_manual(\n    name = \"Probability\",\n    values = c(\"#FF0000A0\", \"#A0A0A0A0\", \"#0000FFA0\"),\n    labels = c(\"(0, 0.025]\", \"(0.025, 0.975]\", \"(0.975, 1]\")\n  ) +\n  theme_ridges()\n```\n:::\n\n\n:::\n\n# 4.4 Visualising Distribution with Raincloud Plot\n\nRaincloud plot is a data visualisation techniques that produces a half-density to a distribution plot. The raincloud plot enhances the traditional box-plot by highlighting multiple modalities (an indivator that groups may exist). The boxplot does not show where densities are clustered, but raincloud plot does.\n\nThe raincloud plot will be created by using functions provided by **ggdist** and **ggplot2** packages.\n\n## 4.4.1 Plotting a Half Eye Graph\n\nA half-eye graph is plotted using **stat_halfeye()** of ggdist package.\n\n::: panel-tabset\n### The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_Part1_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n### The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA)\n```\n:::\n\n\n:::\n\n> \\[!TIP\\] **Things to learn from the code chunk above**\n>\n> We remove the slab interval by setting `.width = 0` and `point_colour = NA`.\n\n## 4.4.2 Adding the boxplot with <code style=\"color: purple;\">geom_boxplot()</code>\n\n::: panel-tabset\n### The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_Part1_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n### The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA)\n```\n:::\n\n\n:::\n\n## 4.4.3 Adding the Dot Plots with <code style=\"color: purple;\">stat_dots()</code>\n\n::: panel-tabset\n### The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_Part1_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n### The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 2)\n```\n:::\n\n\n:::\n\n## 4.4.4 Finishing Touch\n\nLastly, <code style=\"color: purple;\">coord_flip()</code> of ggplot2 will be used to flip the raincloud chart horizontally to give the raincloud appearance.\n\nThe theme economist of ggthemes package is used to give the raincloud chart a professional publishing standard look.\n\n::: panel-tabset\n### The Plot\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](Hands-on_Ex04_Part1_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n### The Code\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(exam, \n       aes(x = RACE, \n           y = ENGLISH)) +\n  stat_halfeye(adjust = 0.5,\n               justification = -0.2,\n               .width = 0,\n               point_colour = NA) +\n  geom_boxplot(width = .20,\n               outlier.shape = NA) +\n  stat_dots(side = \"left\", \n            justification = 1.2, \n            binwidth = .5,\n            dotsize = 1.5) +\n  coord_flip() +\n  theme_economist()\n```\n:::\n\n\n:::\n",
    "supporting": [
      "Hands-on_Ex04_Part1_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}