---
title: "Take-Home Exercise 1: Creating Data Visualisation that is enlightening and truthful"
date: 1 May 2025
date-modified: "last-modified"
author: "Liaw Ying Ting, Celin"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 1. Overview

## 1.1 Setting the scene

A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024

## 1.2 The Task

Assuming the role of the graphical editor of the media company, you are tasked to prepare at most three data visualisation for the article.

To accomplish the task, the data: *Singapore Residents by Planning Area/Subzone, Single Year of Age and Sex, June 2024* dataset shared by [Department of Statistics, Singapore(DOS)](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) is used.

## 1.3 Breaking down the question

Demographic Structure refers to: Age distribution, Gender Ratio and Dependency Ratio (Elderly per working adult)

Demographic Distribution refers to: Planning Area or Subzone, Urban vs Suburban, Age or gender concentrations in specific areas

Based on these information, i plan to answer the following questions:

-   What is the age distribution of Singapore's population in 2024 and what is the proportion of working proportion

# 2. Getting Started

## 2.1 Load packages

We load the following packages using the <code style="color: blue;">pacman::p_load</code> function:

-   **tidyverse:** Core collection of R packages designed for data science

-   **ggrepel:** An R package to provide geoms for gg plot2 to repel overlapping text labels

-   **ggthemes:** An R package to provided extra themes, geoms and scales for ggplot 2

-   **hrbrthemes:** an R packagae that provides typography-centric themes and theme componenets for ggplot2

-   **patchwork:** to prepare composite figure created using ggplot2

```{r}
pacman::p_load(tidyverse, ggrepel, 
               ggthemes,  hrbrthemes,
               patchwork, ggiraph,
               dplyr, forcats) 

```

## 2.2 Import Data

The data that has been used has been mentioned in Chapter 1.2 above. We import this dataset as *resident_data.*

```{r}
resident_data <- read_csv("respopagesex2024.csv")
```

## 2.3 Data Wrangling

### 2.3.1 Check for duplicate entries

We first take a look at the data and check if there are any duplicate entries using <code style="color: blue;">any(duplicated())</code>.

```{r}
any(duplicated(resident_data))

```

Since "FALSE" is returned, there are no duplicated entries

### 2.3.2 Check for missing values

The <code style="color: blue;">colSums</code> function is being used to check for missing values.

```{r}
colSums(is.na(resident_data))
```

Since there are no missing values in any of the rows, we will proceed with the next step.

### 2.3.3 Filtering for relevant variables & renaming them

There are 60424 rows x 6 columns in the data, where the columns are labelled as:

-   **PA** - Planning Area

-   **SZ** - Subzone

-   **Age** - From "0" to "89", and those above 90 are labelled as "90_and_Over"

-   **Sex** - Males or Females

-   **Pop** - Resident Count (Has been rounded to the nearest 10)

-   **Time** - Year (We will only be looking at 2024 data)

Create a new object called **resident_data_clean** where we will rename **PA, SZ** and **Pop** for easy reading by using the <code style="color: blue;">rename()</code> function.

Rename those labelled as "90_and_Over" in the Age Column as "90" using the <code style="color: blue;">ifelse()</code> function for easier data plots.

Ensuring population and age is categorised as numerical data by using the <code style="color: blue;">as.numeric</code> function.

For the Age column, it is slightly special as I used <code style="color: blue;">levels = as.character</code> function as R sorts alphabetically by default and "10" will come before "2" instead. But by using this function, i am forcing R to treat the ages in true numeric order when i plot or tabulate them. A new column, **Age_numeric**, is also created in the new object.

```{r}
resident_data_clean <- resident_data %>%
  rename(
    Planning_Area = PA,
    Subzone = SZ,
    Population = Pop
  ) %>%
  # Convert Age to "90+" if it's "90_and_Over"
  mutate(
    Age = ifelse(Age == "90_and_Over", "90", Age),
    Population = as.numeric(Population),
    Age = factor(Age, levels = as.character(0:90)),
    Age_numeric = as.numeric(as.character(Age))  
  )

```

2.3.4 Preview processed data

```{r}
head(resident_data_clean)
```

Now that data wrangling is complete, we will proceed to share 3 key visualisations performed on this data set.

# 3 Data Visualisation

## 3.1 Age-Sex Pyramid 

```{r}
# 1. Summarise population by Planning Area & Sex
pa_sex_totals <- resident_data_clean %>%
  group_by(Planning_Area, Sex) %>%
  summarise(Total = sum(Population), .groups = "drop") %>%
  # make Male negative so they extend left
  mutate(Value = ifelse(Sex == "Male", -Total, Total))

# 2. Build interactive pyramid by Planning Area
p_pa_pyramid <- ggplot(pa_sex_totals,
                       aes(x       = Value,
                           y       = fct_reorder(Planning_Area, Value, .fun = sum),
                           fill    = Sex,
                           tooltip = paste0("Area: ", Planning_Area,
                                            "\nSex: ", Sex,
                                            "\nPop: ", Total))) +
  geom_col_interactive(width = 0.8) +            # interactive horizontal bars
  scale_x_continuous(labels = abs) +             # show absolute values
  scale_fill_manual(values = c(
    Male   = "#4472C4",   # blue
    Female = "#F4A261"    # peach
  )) +
  labs(
    title = "Population “Pyramid” by Planning Area and Sex (June 2024)",
    x     = "Population",
    y     = "Planning Area"
  ) +
  theme_ipsum_rc() +                              # clean theme
  theme(
    legend.position = "bottom",
    plot.title    = element_text(size = 16, face = "bold")
  )

# 3. Render interactive plot
girafe(ggobj = p_pa_pyramid,
       width_svg = 8, height_svg = 10,
       options = list(
         opts_tooltip(css = "background:lightgray;
                            padding:5px;
                            border-radius:4px;")
       ))

```

```{r}
library(dplyr)
library(ggplot2)
library(ggiraph)
library(hrbrthemes)

# 1. Aggregate national totals by Age & Sex
pyramid_data <- resident_data_clean %>%
  group_by(Age, Sex) %>%
  summarise(Total = sum(Population), .groups = "drop") %>%
  mutate(
    Value   = ifelse(Sex == "Male", -Total, Total),              # negative for males
    tooltip = paste0("Age: ", Age,
                     "\nSex: ", Sex,
                     "\nPopulation: ", Total)                   # hover text
  )

# 2. Build the interactive vertical pyramid
p_vertical <- ggplot(pyramid_data, aes(x = Age, y = Value, fill = Sex)) +
  geom_col_interactive(aes(tooltip = tooltip), width = 0.8) +     # interactive bars
  scale_y_continuous(
    labels = abs,                                                # absolute values on axis
    breaks = scales::pretty_breaks(n = 8)                        # nice breakpoints
  ) +
  scale_fill_manual(
    values = c(Male = "#4472C4", Female = "#ED7D31")             # blue & pink
  ) +
  labs(
    title = "Population Pyramid by Age & Sex (Singapore, June 2024)",
    x     = "Age (years)",
    y     = "Population"
  ) +
  theme_ipsum_rc(base_size = 12) +
  theme(
    legend.position = "bottom",
    axis.text.x     = element_text(angle = 45, hjust = 1)       # tilt age labels if needed
  )

# 3. Render it
girafe(
  ggobj = p_vertical,
  width_svg  = 8, height_svg = 5,
  options = list(
    opts_tooltip(css = "background: #f7f7f7; padding: 5px; border-radius: 4px;")
  )
)

```

```{r fig.width=8, fig.height=15, echo=FALSE}
pyramid_data <- resident_data_clean %>% 
  group_by(Planning_Area, Sex) %>% 
  summarise(Count = n(), .groups = "drop") %>% 
  mutate(Count = ifelse(Sex == "Males", -Count, Count))

ggplot(pyramid_data, aes(x = Planning_Area, y = Count, fill = Sex)) + 
  geom_bar(stat = "identity") + 
  coord_flip() + 
  labs(title = "Age-Sex Pyramid", x = "Planning Area", y = "Sex") + theme_minimal()
```

```{r fig.width=8, fig.height=15, echo=FALSE}
library(dplyr)
library(ggplot2)
library(forcats)   # for fct_reorder

# 1. Build your pyramid data, flipping male counts negative
pyramid_data <- resident_data_clean %>%
  group_by(Planning_Area, Sex) %>%
  summarise(Count = n(), .groups = "drop") %>%     # or sum(Population) if you want population totals
  mutate(Count = ifelse(Sex == "Males", -Count, Count))

# 2. Compute total magnitude per area (abs to ignore sign)
area_order <- pyramid_data %>%
  group_by(Planning_Area) %>%
  summarise(TotalMag = sum(abs(Count)), .groups = "drop") %>%
  arrange(desc(TotalMag)) %>%
  pull(Planning_Area)

# 3. Re­order the factor levels of Planning_Area
pyramid_data <- pyramid_data %>%
  mutate(Planning_Area = factor(Planning_Area, levels = area_order))

# 4. Plot with 0 in the middle, males to the left, females to the right
ggplot(pyramid_data, aes(x = Planning_Area, y = Count, fill = Sex)) +
  geom_col(width = 0.8) +
  coord_flip() +
  scale_y_continuous(
    breaks = scales::pretty_breaks(n=5),
    labels = abs) +
  scale_fill_manual(values = c(Males = "#4472C4", Females = "#ED7D31")) +
  labs(
    title = "Population Pyramid by Planning Area & Sex (Jun 2024)",
    x     = "Planning Area",
    y     = "Count"
  ) +
  theme_minimal() +
  theme(
    legend.position = "bottom",
    axis.text.y     = element_text(size = 10)
  )
  
```

```{r fig.width=8, fig.height=15, echo=FALSE}
library(dplyr)
library(ggplot2)
library(hrbrthemes)
library(forcats)

# 1. Define your region groups
region_map <- list(
  North      = c("Sembawang", "Woodlands", "Yishun"),
  `North-East` = c("Ang Mo Kio", "Hougang", "Punggol", "Sengkang", "Serangoon"),
  East       = c("Bedok", "Pasir Ris", "Tampines"),
  West       = c("Bukit Batok", "Bukit Panjang", "Choa Chu Kang",
                 "Clementi", "Jurong East", "Jurong West", "Tengah"),
  Central    = c("Bishan", "Bukit Merah", "Bukit Timah", "Central Area",
                 "Geylang", "Kallang", "Whampoa", "Marine Parade",
                 "Queenstown", "Toa Payoh")
)

# 2. Tag each row with its region
resident_regioned <- resident_data_clean %>%
  mutate(
    Region = case_when(
      Planning_Area %in% region_map$North        ~ "North",
      Planning_Area %in% region_map$`North-East` ~ "North-East",
      Planning_Area %in% region_map$East         ~ "East",
      Planning_Area %in% region_map$West         ~ "West",
      Planning_Area %in% region_map$Central      ~ "Central",
      TRUE                                       ~ NA_character_
    )
  ) %>%
  filter(!is.na(Region))  # drop any rows that didn't match

# 3. Bin ages into decades
resident_regioned <- resident_regioned %>%
  mutate(
    Age_bin = cut(
      Age_numeric,
      breaks = c(seq(0, 90, by = 10), Inf),
      labels = c(paste0(seq(0,80,by=10), "-", seq(9,89,by=10)), "90"),
      right = FALSE
    )
  )

# 4. Aggregate totals by Region × Age_bin × Sex
pyramid_data <- resident_regioned %>%
  group_by(Region, Age_bin, Sex) %>%
  summarise(Total = sum(Population), .groups = "drop") %>%
  # flip males negative for left-side bars
  mutate(Value = ifelse(Sex == "Males", -Total, Total))

# 5. Plot facetted pyramids
ggplot(pyramid_data, aes(x = Value, y = Age_bin, fill = Sex)) +
  geom_col(width = 0.8) +
  # one strip per region
  facet_wrap(~ Region, ncol = 2) +
  # make the x-axis symmetric and show absolute labels
  scale_x_continuous(
    labels = abs,
    breaks = scales::pretty_breaks(n = 5)
  ) +
  scale_fill_manual(
    values = c(Males = "#4472C4", Females = "#ED7D31")
  ) +
  labs(
    title = "Age–Sex Pyramids by Region (June 2024)",
    x     = "Population",
    y     = "Age group (years)"
  ) +
  theme_ipsum_rc(base_size = 12) +
  theme(
    legend.position   = "bottom",
    strip.text        = element_text(face = "bold"),
    axis.title.y      = element_blank(),
    panel.grid.major.y = element_blank()
  )

```
