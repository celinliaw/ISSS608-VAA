---
title: "Take-Home Exercise 1: Creating Data Visualisation that is enlightening and truthful"
date: 1 May 2025
date-modified: "last-modified"
author: "Liaw Ying Ting, Celin"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 1. Overview

## 1.1 Setting the scene

A local online media company that publishes daily content on digital platforms is planning to release an article on demographic structures and distribution of Singapore in 2024

## 1.2 The Task

Assuming the role of the graphical editor of the media company, you are tasked to prepare at most three data visualisation for the article.

To accomplish the task, the data: *Singapore Residents by Planning Area/Subzone, Single Year of Age and Sex, June 2024* dataset shared by [Department of Statistics, Singapore(DOS)](https://www.singstat.gov.sg/find-data/search-by-theme/population/geographic-distribution/latest-data) is used.

## 1.3 Breaking down the question

Demographic Structure refers to: Age distribution, Gender Ratio and Dependency Ratio (Elderly per working adult)

Demographic Distribution refers to: Planning Area or Subzone, Urban vs Suburban, Age or gender concentrations in specific areas

Based on these information, i plan to answer the following questions:

-   What is the age distribution of Singapore's population in 2024 and what is the proportion of working proportion

# 2. Getting Started

## 2.1 Load packages

We load the following packages using the <code style="color: blue;">pacman::p_load</code> function:

-   **tidyverse:** Core collection of R packages designed for data science

-   **ggrepel:** An R package to provide geoms for gg plot2 to repel overlapping text labels

-   **ggthemes:** An R package to provided extra themes, geoms and scales for ggplot 2

-   **hrbrthemes:** an R packagae that provides typography-centric themes and theme componenets for ggplot2

-   **patchwork:** to prepare composite figure created using ggplot2

```{r}
pacman::p_load(tidyverse, ggrepel, 
               ggthemes,  hrbrthemes,
               patchwork,
               dplyr, forcats) 

```

## 2.2 Import Data

The data that has been used has been mentioned in Chapter 1.2 above. We import this dataset as *resident_data.*

```{r}
resident_data <- read_csv("respopagesex2024.csv")
```

## 2.3 Data Wrangling

### 2.3.1 Check for duplicate entries

We first take a look at the data and check if there are any duplicate entries using <code style="color: blue;">any(duplicated())</code>.

```{r}
any(duplicated(resident_data))

```

Since "FALSE" is returned, there are no duplicated entries

### 2.3.2 Check for missing values

The <code style="color: blue;">colSums</code> function is being used to check for missing values.

```{r}
colSums(is.na(resident_data))
```

Since there are no missing values in any of the rows, we will proceed with the next step.

### 2.3.3 Filtering for relevant variables & renaming them

There are 60424 rows x 6 columns in the data, where the columns are labelled as:

-   **PA** - Planning Area

-   **SZ** - Subzone

-   **Age** - From "0" to "89", and those above 90 are labelled as "90_and_Over"

-   **Sex** - Males or Females

-   **Pop** - Resident Count (Has been rounded to the nearest 10)

-   **Time** - Year (We will only be looking at 2024 data)

Create a new object called **resident_data_clean** where we will rename **PA, SZ** and **Pop** for easy reading by using the <code style="color: blue;">rename()</code> function.

Rename those labelled as "90_and_Over" in the Age Column as "90" using the <code style="color: blue;">ifelse()</code> function for easier data plots.

Ensuring population and age is categorised as numerical data by using the <code style="color: blue;">as.numeric</code> function.

For the Age column, it is slightly special as I used <code style="color: blue;">levels = as.character</code> function as R sorts alphabetically by default and "10" will come before "2" instead. But by using this function, i am forcing R to treat the ages in true numeric order when i plot or tabulate them. A new column, **Age_numeric**, is also created in the new object.

```{r}
resident_data_clean <- resident_data %>%
  rename(
    Planning_Area = PA,
    Subzone = SZ,
    Population = Pop
  ) %>%
  # Convert Age to "90+" if it's "90_and_Over"
  mutate(
    Age = ifelse(Age == "90_and_Over", "90", Age),
    Population = as.numeric(Population),
    Age = factor(Age, levels = as.character(0:90)),
    Age_numeric = as.numeric(as.character(Age))  
  )

```

2.3.4 Preview processed data

```{r}
head(resident_data_clean)
```

Now that data wrangling is complete, we will proceed to share 3 key visualisations performed on this data set.

# 3 Data Visualisation

As there are too many planning areas, to make things easier to visualise, I categorised them into 5 areas: North, North-East, East, West and Central. This is done by using the categories on the [Urban Redevelopment Authority(URA)](https://eservice.ura.gov.sg/maps/?service=MP) website:

-   **North**: Central Water Catchment, Lim Chu Kang, Mandai, Sembawang, Simpang, Sungei Kadut, Woodlands, Yishun

-   **North-East**: Ang Mo Kio, Hougang, Punggol, Sengkang, Serangoon, Seletar

-   **East**: Bedok, Changi, Changi Bay, Pasir Ris, Paya Lebar, Tampines

-   **West**: Boon Lay, Bukit Batok, Bukit Panjang, Choa Chu Kang, Clementi, Jurong East, Jurong West, Pioneer, Tengah, Tuas, Western Water Cachement

-   **Central**: Bishan, Bukit Merah, Bukit Timah, Central Area, Downtown Core, Marina East, Marina South, Museum, Newton, Novena, Orchard, Outram, River Valley, Rochor, Singapore River, Straits View, Tanglin

    Areas like **North-Eastern Islands** and **Western islands** are intentionally left out as they do not belong to any of the areas

Steps:

Step 1: I first created a new list called **region_map** to categorise them into the 5 categories

```{r}
# 1. Step 1
region_map <- list(
  North = c(
    "Central Water Catchment", "Lim Chu Kang", "Mandai",
    "Sembawang", "Simpang", "Sungei Kadut", "Woodlands", "Yishun"
  ),
  `North-East` = c(
    "Ang Mo Kio", "Hougang", "Punggol", "Sengkang", 
    "Serangoon", "Seletar"
  ),
  East = c(
    "Bedok", "Changi", "Changi Bay", 
    "Pasir Ris", "Paya Lebar", "Tampines"
  ),
  West = c(
    "Boon Lay", "Bukit Batok", "Bukit Panjang", "Choa Chu Kang",
    "Clementi", "Jurong East", "Jurong West", "Pioneer", 
    "Tengah", "Tuas", "Western Water Catchment"
  ),
  Central = c(
    "Bishan", "Bukit Merah", "Bukit Timah", "Central Area",
    "Downtown Core", "Marina East", "Marina South", "Museum",
    "Newton", "Novena", "Orchard", "Outram", "River Valley",
    "Rochor", "Singapore River", "Straits View", "Tanglin"
  )
)
```

Step 2: A new data object **resident_regioned** was then created with their region matched to them and those who are not found are removed using <code style="color: blue;">filter()</code> function.

```{r}
# Step 2
resident_regioned <- resident_data_clean %>%
  mutate(
    Region = case_when(
      Planning_Area %in% region_map$North        ~ "North",
      Planning_Area %in% region_map$`North-East` ~ "North-East",
      Planning_Area %in% region_map$East         ~ "East",
      Planning_Area %in% region_map$West         ~ "West",
      Planning_Area %in% region_map$Central      ~ "Central",
      TRUE                                       ~ NA_character_
    )
  ) %>%
  filter(!is.na(Region))
```

This will enable me to group them into their respective regions for the analysis.

## 3.1 Pie Chart By Regions

First, i create groups using <code style="color: blue;">groupby()</code> to group them by regions and sex (Eg. East Males and East Females) so that i can get the total number of each group using <code style="color: blue;">sum()</code>. After that, <code style="color: blue;">.groups = "drop"</code> will remove the groups as ggplot doesn't use groupings to plot and some functions that "mutate" may not turn out as expected.

Next, <code style="color: blue;">ordered_levels</code> is created to define the stacking order for the pie slices in a clockwise direction.


::: panel-tabset
### The Plot
```{r}
#| echo: false
# Summarise population by Region and Sex
pie_all_regions <- resident_regioned %>%
  group_by(Region, Sex) %>%
  summarise(Population = sum(Population), .groups = "drop")


# Define the correct stacking order for pie slices
ordered_levels <- rev(c(
  "Central.Males", "Central.Females",
  "East.Males", "East.Females",
  "North.Males", "North.Females",
  "North-East.Males", "North-East.Females",
  "West.Males", "West.Females"
))

# Prepare the data
pie_all_regions <- pie_all_regions %>%
  mutate(
    RegionSex = factor(paste(Region, Sex, sep = "."), levels = ordered_levels),
    label = paste0(round(Population / sum(Population) * 100, 1), "%")
  )

# Plot: simple, clean pie with percentages inside
ggplot(pie_all_regions, aes(x = "", y = Population, fill = RegionSex)) +
  geom_col(width = 1, color = "white") +
  geom_text(
    aes(label = label),
    position = position_stack(vjust = 0.5),
    size = 3,
    color = "black"
  ) +
  coord_polar(theta = "y") +
  theme_void() +
  labs(
    title = "Population Composition by Region and Gender (2024)",
    fill = "Region & Sex"
  ) +
  scale_fill_manual(
    values = c(
      "Central.Males"     = "#f4cccc",
      "Central.Females"   = "#a94442",
      "East.Males"        = "#d9ead3",
      "East.Females"      = "#6aa84f",
      "North.Males"       = "#fce5cd",
      "North.Females"     = "#e69138",
      "North-East.Males"  = "#d9d2e9",
      "North-East.Females"= "#8e7cc3",
      "West.Males"        = "#cfe2f3",
      "West.Females"      = "#3c78d8"
    ),
    breaks = rev(ordered_levels)
  )

```

### The Code
```{r}
#| echo: false
# Summarise population by Region and Sex
pie_all_regions <- resident_regioned %>%
  group_by(Region, Sex) %>%
  summarise(Population = sum(Population), .groups = "drop")


# Define the correct stacking order for pie slices
ordered_levels <- rev(c(
  "Central.Males", "Central.Females",
  "East.Males", "East.Females",
  "North.Males", "North.Females",
  "North-East.Males", "North-East.Females",
  "West.Males", "West.Females"
))

# Prepare the data
pie_all_regions <- pie_all_regions %>%
  mutate(
    RegionSex = factor(paste(Region, Sex, sep = "."), levels = ordered_levels),
    label = paste0(round(Population / sum(Population) * 100, 1), "%")
  )

# Plot: simple, clean pie with percentages inside
ggplot(pie_all_regions, aes(x = "", y = Population, fill = RegionSex)) +
  geom_col(width = 1, color = "white") +
  geom_text(
    aes(label = label),
    position = position_stack(vjust = 0.5),
    size = 3,
    color = "black"
  ) +
  coord_polar(theta = "y") +
  theme_void() +
  labs(
    title = "Population Composition by Region and Gender (2024)",
    fill = "Region & Sex"
  ) +
  scale_fill_manual(
    values = c(
      "Central.Males"     = "#f4cccc",
      "Central.Females"   = "#a94442",
      "East.Males"        = "#d9ead3",
      "East.Females"      = "#6aa84f",
      "North.Males"       = "#fce5cd",
      "North.Females"     = "#e69138",
      "North-East.Males"  = "#d9d2e9",
      "North-East.Females"= "#8e7cc3",
      "West.Males"        = "#cfe2f3",
      "West.Females"      = "#3c78d8"
    ),
    breaks = rev(ordered_levels)
  )

```
:::

From the pie chart, it can be seen that the **proportion of males and females in each area is quite similar**, only differing by 1-2%. However, it can be seen from the pie chart that the proportion of **males are consistently lesser** that the proportion of females in each area. We can then conclude that there are **slightly less males that females in Singapore**.

Additionally, the **West and North-East Areas each made up 25%** of the total population, accounting for half the population in Singapore while the North, Central and and East made up of the other half of Singapore's population.

## 3.2 Age Sex Pyramid by Regions

The data was then mutated using <code style="color: blue;">cut()</code> and <code style="color: blue;">breaks()</code> function to split them into Age categories: "0-9", "10-19" and so on. In the <code style="color: blue;">cut()</code> function, "right = FALSE" was used to exclude the upper bound of the bins so that they will consider 0-9 instead of 0-10 for each bin. A new column **Age_bin** was created.

```{r}
# Step 3
resident_regioned <- resident_regioned %>%
  mutate(
    Age_bin = cut(
      Age_numeric,
      breaks = c(seq(0, 90, by = 10), Inf),
      labels = c(paste0(seq(0,80,by=10), "-", seq(9,89,by=10)), "90 and Above"),
      right = FALSE
    )
  )
```

A new data object **pyramid_data** was created to create the pyramid table. <code style="color: blue;">groupby()</code> and <code style="color: blue;">summarise(Total = sum())</code> functions were used to group them by region(East, West etc), age group(Eg. 0-9, 10-19 etc) and sex(Males or females), before summing them up.

<code style="color: blue;">Value = ifelse(Sex == "Males, -Total, Total")</code> was then used to flip males to negative values so they will be plotted to the left, while the female values remain as positive.

<code style="color: blue;">Label = format(Total, big.mark = ",")</code> is used to convert the numbers from 52300 to 52,300. These labels will be shown beside the bar graph.

<code style="color: blue;">hjust = ifelse(Sex == "Males", 1.1, -0.1)</code> aligns the male label to the left of the graph and aligns the female label to the right of the graph.

```{r}
# Step 4: Prepare pyramid data for static chart
pyramid_data <- resident_regioned %>%
  group_by(Region, Age_bin, Sex) %>%
  summarise(Total = sum(Population), .groups = "drop") %>%
  mutate(
    Value = ifelse(Sex == "Males", -Total, Total),
    Label = format(Total, big.mark = ","),
    hjust = ifelse(Sex == "Males", 1.1, -0.1)  # push left or right based on sex
  )
```

In this section, I will be plotting individual plots and putting them together with <code style="color: blue;">patchwork</code>.

First, i created a reusable function called <code style="color: blue;">plot_region_pyramid</code> so that i am able to call it by its region name.

<code style="color: blue;">ggplot</code> is then used next to plot the graph. <code style="color: blue;">aes( x = Value, y = Age_bin, fill = Sex)</code> uses x-axis as Values so that Males are negative and Females are positive, y-axis is using the <code style="color: blue;">Age_bin</code> which was created previously ranging from "0-9", "10-19" etc and fill is coloured by the different Sex.

<code style="color: blue;">geom_col(width = 0.8)</code> makes the width slightly smaller than 1 so that they do not touch.

<code style="color: blue;">geom_text(aes(label = Label, hjust = hjust), size = 2.8, color = "black")</code> is an aesthetic label that uses the pre-formatted functions in the code chunk before this.

<code style="color: blue;">scale_x_continuous()</code> helps to adjust the labels of the axis to follow pre-defined values that i mentioned in the code

<code style="color: blue;">coord_cartesian()</code> adjusts the actual values of the axis.

<code style="color: blue;">scale_fill_manual</code> sets the fill colour for males and females.

<code style="color: blue;">labs()</code> add a title for each pane with the region name.

<code style="color: blue;">theme_minimal()</code> uses the minimal theme.

<code style="color: blue;">(p1 / p2 / p3 / p4 / p5) + plot_layout(guides = "collect")</code> helps to put the graphs together and show only 1 legend.

::: panel-tabset
### The plot

```{r fig.width=8, fig.height=15, echo=FALSE}
#| echo: false
plot_region_pyramid <- function(region_name) {
  base_plot <- ggplot(
    data = filter(pyramid_data, Region == region_name),
    aes(x = Value, y = Age_bin, fill = Sex)
  ) +
    geom_col(width = 0.8) +
    geom_text(aes(label = Label, hjust = hjust), size = 2.8, color = "black") +
    scale_x_continuous(
      breaks = c(-75000, -50000, -25000, 0, 25000, 50000, 75000),
      labels = function(x) paste0(abs(x) / 1000, "K")
    ) +
    coord_cartesian(xlim = c(-85000, 85000)) +
    scale_fill_manual(values = c(Males = "#4472C4", Females = "#ED7D31")) +
    labs(
      title = paste("Region:", region_name),
      x = "Population",
      y = "Age Group"
    ) +
    theme_minimal(base_size = 9) +
    theme(
      strip.text = element_text(face = "bold"),
      axis.title.y = element_blank(),
      panel.grid.minor.x = element_blank(),
      panel.grid.major.x = element_line(color = "grey80")
    )
}

# Generate plots for each region
p1 <- plot_region_pyramid("Central")
p2 <- plot_region_pyramid("East")
p3 <- plot_region_pyramid("North")
p4 <- plot_region_pyramid("North-East")
p5 <- plot_region_pyramid("West")

# Arrange using patchwork (2 columns)
(p1 / p2 / p3 / p4 / p5) + plot_layout(guides = "collect")


```

### The code

```{r}
#| eval: false

plot_region_pyramid <- function(region_name) {
  ggplot(
    data = filter(pyramid_data, Region == region_name),
    aes(x = Value, y = Age_bin, fill = Sex)
  ) +
    geom_col(width = 0.8) +
    geom_text(aes(label = Label, hjust = hjust), size = 2.8, color = "black") +
    scale_x_continuous(
      breaks = c(-75000, -50000, -25000, 0, 25000, 50000, 75000),
      labels = function(x) paste0(abs(x) / 1000, "K")
    ) +
    coord_cartesian(xlim = c(-85000, 85000)) +
    scale_fill_manual(values = c(Males = "#4472C4", Females = "#ED7D31")) +
    labs(
      title = paste("Region:", region_name),
      x = "Population",
      y = "Age Group"
    ) +
    theme_minimal(base_size = 9) +
    theme(
      legend.position = "none",
      strip.text = element_text(face = "bold"),
      axis.title.y = element_blank(),
      panel.grid.minor.x = element_blank(),
      panel.grid.major.x = element_line(color = "grey80")
    )
}

# Generate plots for each region
p1 <- plot_region_pyramid("Central")
p2 <- plot_region_pyramid("East")
p3 <- plot_region_pyramid("North")
p4 <- plot_region_pyramid("North-East")
p5 <- plot_region_pyramid("West")

# Arrange using patchwork (2 columns)
(p1 / p2 / p3 / p4 / p5) + plot_layout(guides = "collect")

```
:::

From the graphs, it can be seen that the population of **Ages** **30 to 69** are consistently larger than the population of **Ages** **0 to 29** in most areas, proving that there are lower birth rates in the recent years.

## 3.3 Bar Graph of Retirees to Working Adults

As the current retirement age is at 68 years old and Singaporeans usually start work around 23 to 25 years old at graduation, we will use the population of those **above 68 years old** over the population of those **Aged 24 to 67** and find the **ratio of Retirees to working adults.**

::: panel-tabset
### The Plot

```{r}
#| echo: false
adjusted_ageing_ratio_by_region <- resident_regioned %>%
  mutate(Age_numeric = as.numeric(as.character(Age))) %>%
  filter(!is.na(Age_numeric)) %>%
  mutate(Age_Group = case_when(
    Age_numeric >= 68 ~ "68+",
    Age_numeric >= 24 & Age_numeric <= 67 ~ "24-67",
    TRUE ~ "Other"
  )) %>%
  filter(Age_Group != "Other") %>%
  group_by(Region, Age_Group) %>%
  summarise(Population = sum(Population), .groups = "drop") %>%
  pivot_wider(names_from = Age_Group, values_from = Population) %>%
  mutate(Adjusted_Ageing_Ratio = `68+` / `24-67`)

ggplot(adjusted_ageing_ratio_by_region, aes(x = reorder(Region, Adjusted_Ageing_Ratio), y = Adjusted_Ageing_Ratio)) +
  geom_col(fill = "#80CBC4") +
  geom_text(aes(label = round(Adjusted_Ageing_Ratio, 3)), hjust = -0.1) +
  expand_limits(y = max(adjusted_ageing_ratio_by_region$Adjusted_Ageing_Ratio) * 1.1) +
  labs(
    title = "Ratio of Retirees(68YO+) to Working Adults(24-67YO)",
    x = "Region",
    y = "Adjusted Ageing Ratio"
  ) +
  coord_flip() +
  theme_minimal()

```

### The Code

```{r}
#| eval: false
adjusted_ageing_ratio_by_region <- resident_regioned %>%
  mutate(Age_numeric = as.numeric(as.character(Age))) %>%
  filter(!is.na(Age_numeric)) %>%
  mutate(Age_Group = case_when(
    Age_numeric >= 68 ~ "68+",
    Age_numeric >= 24 & Age_numeric <= 67 ~ "24-67",
    TRUE ~ "Other"
  )) %>%
  filter(Age_Group != "Other") %>%
  group_by(Region, Age_Group) %>%
  summarise(Population = sum(Population), .groups = "drop") %>%
  pivot_wider(names_from = Age_Group, values_from = Population) %>%
  mutate(Adjusted_Ageing_Ratio = `68+` / `24-67`)

ggplot(adjusted_ageing_ratio_by_region, aes(x = reorder(Region, Adjusted_Ageing_Ratio), y = Adjusted_Ageing_Ratio)) +
  geom_col(fill = "#80CBC4") +
  geom_text(aes(label = round(Adjusted_Ageing_Ratio, 3)), hjust = -0.1) +
  expand_limits(y = max(adjusted_ageing_ratio_by_region$Adjusted_Ageing_Ratio) * 1.1) +
  labs(
    title = "Ratio of Retirees(68YO+) to Working Adults(24-67YO)",
    x = "Region",
    y = "Adjusted Ageing Ratio"
  ) +
  coord_flip() +
  theme_minimal()
```
:::
