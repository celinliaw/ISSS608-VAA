---
title: "Hands-On_Ex05 - Modelling, Visualising and Analysing Network Data with R"
author: "Liaw Ying Ting, Celin"
date: 13 May 2025
date-modified: "last-modified"

format:
  html:
    code-fold: true
    code-tools: true

execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 9 Modelling, Visualising and Analysing Network Data with R

# 9.1 Overview

In the hands-on exercise, I will be learning how to model, analyse and visualize network data with R.

By the end of this hands-on exercise, I will be able to:

-   Create graph objects data frames, manipulate them using appropriate appropriate functions of *dpylr, lubricate and tidygraph*

-   Build network graph visualisation using appropriate functions of *ggraph*

-   compute network geometrics using *tidygraph*

-   build advanced graph visualisation by incorporating the network geometrics

-   build interactive network visualisation using *visNetwork* package

# 9.2 Getting Started

9.2.1 Installing and Launching R Packages

```{r}
pacman::p_load(igraph, tidygraph, ggraph, 
               visNetwork, lubridate, clock,
               tidyverse, graphlayouts, 
               concaveman, ggforce)
```

# 9.3 The Data

The data sets used in this hands-on exercise is from an oil exploration and extraction company. There are two data sets. One contains the nodes data and the other contains the edges (also known as link) data.

## 9.3.1 The Edges Data

-   *GAStech_email_edge-v2.csv* consists of the names, department and title of 55 employees

![](images/clipboard-1196216663.png)

## 9.3.2 The Nodes Data

-   GAStech_email_nodes.csv consists of the names, department and title of the 55 employees

![](images/clipboard-688382718.png)

## 9.3.3 Importing network data from files

In this step, GAStech_email_node.csv and GAStech_email_edges-v2.csv will be imported into Rstudio environment by using <code style="color: blue;">read_csv</code> of **readr** package.

```{r}
GAStech_nodes <- read_csv("GAStech_email_node.csv")
GAStech_edges <- read_csv("GAStech_email_edge-v2.csv")
```

## 9.3.4 Reviewing Imported Data

Next, the structure of the data frame will be examined using *glimpse()* of **dplyr.**

```{r}
glimpse(GAStech_edges)
```

::: callout-warning
## Warning

The output report of GAStech_edges above revelas that the *SentDate* is treated as "Character" data type instead of *date* data type. This is an error! Before we continue, it is important for us to change the data type of *SentDate* field back to "Date" data type.
:::

## 9.3.5 Wrangling Time

```{r}
GAStech_edges <- GAStech_edges %>%
  mutate(SendDate = dmy(SentDate)) %>%
  mutate(Weekday = wday(SentDate,
                        label = TRUE,
                        abbr = FALSE))
```

::: callout-tip
## Things to learn from the code chunk above

-   both

<!-- -->

-   both `dmy()` and `wday()` are functions of **lubridate** package. [lubridate](https://lubridate.tidyverse.org/) is an R package that makes it easier to work with dates and times.
-   `dmy()` transforms the `SentDate` to Date data type.
-   `wday()` returns the day of the week as a decimal number or an ordered factor if label is TRUE. The argument abbr is FALSE keeps the daya spells in full, i.e. Monday. The function will create a new column in the data.frame i.e. Weekday and the output of `wday()` will save in this newly created field
-   the values in the *weekday* field are in ordinal scale
:::

## 9.3.6 Reviewing the revised date fields

Table below shows the data structure of the reformatted *GAStech_edges* data frame

```{r}
#| echo: false
glimpse(GAStech_edges)
```

## 9.3.7 Wrangling Attributes

A close examination of *GAStech_edges* data.frame reveals that it consists of individual e-mail flow records. This is not very useful for visualisation.

In view of this, we will aggregate the individual by date, senders, receivers, main subject and day of the week.

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  filter(MainSubject == "Work related") %>%
  group_by(source, target, Weekday) %>%
    summarise(Weight = n()) %>%
  filter(source!=target) %>%
  filter(Weight > 1) %>%
  ungroup()
```

::: callout-tip
### Things to learn from the code chunk above:

-   four functions from **dplyr** package are used. They are: *filter(), group(), summarise()* and *ungroup()*
-   The output data.frame is called **GAStech_edges_aggregated**
-   A new field called *Weight* has been added in GAStech_edges_aggregated
:::

## 9.3.8 Reviewing the revised edges file

Table below shows the data structure of the reformatted *GAStech_edges* data frame

```{r}
#| echo: false
glimpse(GAStech_edges)
```

# 9.4 Creating network objects using tidygraph

In this section, you will learn how to create a graph data model by using **tidygraph** package. It provides a tidy API for graph/network manipulation. While network data itself is not tidy, it can be envisioned as two tidy tables, one for node data and one for edge data. **Tidygraph** provides a way to switch between the two tables and provides **dplyr** verbs for manipulating them. Furthermore, it provides access to a lot of graph algorithms with return values that facilitate their use in a tidy workflow.

The two articles below provide more information:

-   [Introducing tidygraph](https://www.data-imaginist.com/2017/introducing-tidygraph/)

-   [Tidygraph 1.1 - A Tidy hope](https://www.data-imaginist.com/posts/2018-02-12-tidygraph-1-1-a-tidy-hope/index.html)

## 9.4.1 The tbl_graph object

Two functions of **tidygraph** package can be used to create network objects, they are:

-   [tbl_graph()](https://tidygraph.data-imaginist.com/reference/tbl_graph.html) creates a **tbl_graph** net work object from nodes and edges data

-   [as_tbl_graph()](https://tidygraph.data-imaginist.com/reference/tbl_graph.html) converts network data and objects to a **tbl_graph** network. Below are network data and objects supported by `as_tbl_graph()`

    -   a node data.frame and an edge data.frame

    -   data.frame, lst, matrix from base

    -   igraph from igraph

    -   network from network

    -   dendogram and hclust from stats

    -   Node from data.tree

    -   phylo and evonet from ape

    -   graphNEL, graphAM, graphBAM from graph (in Bioconductor)

## 9.4.2 The dplyr verbs in tidygraph

-   *activate()* verb from **tidygraph** serves as a switch between tibbles for nodes and edges. All dpylr verbs applied to **tbl_graph** object are applied to the active tibble

![](images/clipboard-2816690708.png)

-   In the above the *.N()* function is used to gain access to the node data while manipulating the edge data. Similarly, *.E()* will give the edge data and *.G()* will give you the **tbl_graph** object itself

## 9.4.3 Using `tbl_graph()` to build tidy graph data model

In this section, `tbl_graph()` of **tinygraph** package will be used to build a tidygraph's network graph data.frame.

A reference guide of [tbl_graph](https://tidygraph.data-imaginist.com/reference/tbl_graph.html) can be found here.

```{r}
GAStech_graph <- tbl_graph(nodes = GAStech_nodes,
                           edges = GAStech_edges_aggregated, 
                           directed = TRUE)
```

## 9.4.4 Reviewing the output tidygraph's graph object

```{r}
GAStech_graph
```

## 9.4.5 Reviewing the output tidygraph's graph object

-   The output above reveals that *GAStech_graph* is a tbl_graph object with 54 nodes and 4541 edges

-   The command also prints the first six rows of “Node Data” and the first three of “Edge Data”.

-   It states that the Node Data is **active**. The notion of an active tibble within a tbl_graph object makes it possible to manipulate the data in one tibble at a time.

## 9.4.6 Changing the active object

The nodes tibble data frame is activated by default, but you can change which tibble data frame is active with the *activate()* function. Thus, if we wanted to rearrange the rows in the edges tibble to list those with the highest “weight” first, we could use *activate()* and then *arrange()*.

```{r}
GAStech_graph %>%
  activate(edges) %>%
  arrange(desc(Weight))
```

More information can be found in the reference guide of [activate()](https://tidygraph.data-imaginist.com/reference/activate.html).

# 9.5 Plotting Static Network Graphs with ggraph package

Ggraph is an extension of ggplot2, making it easier to carry over basic ggplot skills to the design of network graphs.

As in all network graphs, there are three main aspects to a ggraph's network graph, they are:

-   [nodes](https://cran.r-project.org/web/packages/ggraph/vignettes/Nodes.html)

-   [edges](https://cran.r-project.org/web/packages/ggraph/vignettes/Edges.html)

-   [layouts](https://cran.r-project.org/web/packages/ggraph/vignettes/Layouts.html)

For a comprehensive discussion of each of this aspect of graph, please refer to their respective vignettes provided.

## 9.5.1 Plotting a basic network graph

The code chunk below uses [ggraph()](https://ggraph.data-imaginist.com/reference/ggraph.html), [geom-edge_link()](https://ggraph.data-imaginist.com/reference/geom_edge_link.html), and [geom_node_point](https://ggraph.data-imaginist.com/reference/geom_node_point.html) to plot a network graph by using *GAStech_graph.*

```{r}
ggraph(GAStech_graph) +
  geom_edge_link() +
  geom_node_point()
```

::: callout-tip
## Things to learn from the code chunk above:

-   The basic plotting function is `ggraph()`, which takes the data to be used for the graph and the type of layout desired. Both of the arguments for `ggraph` are built around *igraph*. Therefore, `ggraph()` can use either an *igraph* object or a tbl_graph object
:::

## 9.5.2 Changing the default network graph theme

In this section, you will use [theme_graph()](https://ggraph.data-imaginist.com/reference/theme_graph.html) to remove the x and y axes.

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

::: callout-tip
## Things to learn from the code chunk above:

-   **ggraph** introduces a special ggplot theme that provides better defaults for network graphs than the normal ggplot defaults. `theme_graph()`, besides removing axes, grids and broder, changes the font to Arial Narrow (this can be overridden)

-   The ggraph theme can be set for a series of plots with the `set_graph_style()` command run before the graphs are plotted or by using `theme_graph()` in the individual plots
:::

## 9.5.3 Changing the coloring of the plot

The code `theme_graph()` makes it easy to change the coloring of the plot.

```{r}
g <- ggraph(GAStech_graph) + 
  geom_edge_link(aes(colour = 'grey50')) +
  geom_node_point(aes(colour = 'grey40'))

g + theme_graph(background = 'grey10',
                text_colour = 'white')
```

## 9.5.4 Working with ggraph's layouts

**ggraph** support many layout for standard use, they are: star, circle, nicely(default), dh, gem, graphopt, grid, mds, spahere, randomly, fr, kk, drl and lgl. Figures below and on the right show layouts supported by `ggraph`.

```{r}
library(knitr)
include_graphics("https://r4va.netlify.app/chap27/img/image4.jpg")
```

9.5.5 Fruchterman and Reingold Layout

The code chunks below will be used to plot the network graph using Fruchterman and Reingold layout.

```{r}
g <- ggraph(GAStech_graph, 
            layout = "fr") +
  geom_edge_link(aes()) +
  geom_node_point(aes())

g + theme_graph()
```

::: callout-tip
## Things to learn from the code chunk above:

-   *layout* argument is used to define the layout to be used
:::

## 9.5.6 Modifying network nodes

Each node will be colours based on their respective departments

```{r}
g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes()) +
  geom_node_point(aes(colour = Department, 
                      size = 3))

g + theme_graph()
```

9.5.7 Modifying Edges

In the code chunk below, the thickness of the edges will be mapped with the *Weight* variable

```{r}
g <- ggraph(GAStech_graph, 
            layout = "nicely") +
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 3)

g + theme_graph()
```

::: callout-tip
## Things to learn from the code chunks above:

-   *geom_edge_link* draws edges in the simplest way - as straight lines between the start and end nodes. But it can do more than that. In the example above, argument *width* is used to map the width of the line in proportion to the weight attribute and argument alpha is used to introduce opacity on the line
:::

# 9.6 Creating Facet Graphs

Another very useful feature of **ggraph** is faceting. In visualising network data, this technique can be used to reduce edge over-plotting in a very meaning way by spreading nodes and edges out based on their attributes. In this section, you will learn how to use faceting technique to visualise network data.

There are three functions in ggraph to implement faceting, they are:

-   [*facet_nodes()*](https://ggraph.data-imaginist.com/reference/facet_nodes.html) whereby edges are only draw in a panel if both terminal nodes are present here,

-   [*facet_edges()*](https://ggraph.data-imaginist.com/reference/facet_edges.html) whereby nodes are always drawn in al panels even if the node data contains an attribute named the same as the one used for the edge facetting, and

-   [*facet_graph()*](https://ggraph.data-imaginist.com/reference/facet_graph.html) faceting on two variables simultaneously.

## 9.6.1 Working with *facet_edges()*

In the code chunk below, [*facet_edges()*](https://ggraph.data-imaginist.com/reference/facet_edges.html) is used.

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)

g + facet_edges(~Weekday)
```

## 9.6.2 Working with *facet_edges()*

The code chunk below uses *theme()* to change the position of the legend.

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2) +
  theme(legend.position = 'bottom')
  
g + facet_edges(~Weekday)
```

## 9.6.3 A Framed facet graph

```{r}
set_graph_style() 

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_edges(~Weekday) +
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

## 9.6.4 Working with *facet_nodes()*

In the code chunk below, [*facet_nodes()*](https://ggraph.data-imaginist.com/reference/facet_nodes.html) is used.

```{r}
set_graph_style()

g <- ggraph(GAStech_graph, 
            layout = "nicely") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department), 
                  size = 2)
  
g + facet_nodes(~Department)+
  th_foreground(foreground = "grey80",  
                border = TRUE) +
  theme(legend.position = 'bottom')
```

# 9.7 Network Metrics Analysis

## 9.7.1 Computing centrality indices

Centrality measures are a collection of statistical indices use to describe the relative important of the actors are to a network. There are four well-known centrality measures, namely: degree, betweenness, closeness and eigenvector. It is beyond the scope of this hands-on exercise to cover the principles and mathematics of these measure here. Students are encouraged to refer to *Chapter 7: Actor Prominence* of **A User’s Guide to Network Analysis in R** to gain better understanding of theses network measures.

```{r}
g <- GAStech_graph %>%
  mutate(betweenness_centrality = centrality_betweenness()) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department,
            size=betweenness_centrality))
g + theme_graph()
```

::: callout-tip
## Things to learn from the code chunk above:

-   *mutate()* of **dplyr** is used to perform the computation

-   the algorithm used, on the other hand, is the *centrality_betweenness()* of **tidygraph**.
:::

## 9.7.2 Visualising network metrics

It is important to note that from **ggraph v2.0** onward tidygraph algorithms such as centrality measures can be accessed directly in ggraph calls. This means that it is no longer necessary to precompute and store derived node and edge centrality measures on the graph in order to use them in a plot.

```{r}
g <- GAStech_graph %>%
  ggraph(layout = "fr") + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(colour = Department, 
                      size = centrality_betweenness()))
g + theme_graph()
```

9.7.3 Visualising Community

tidygraph package inherits many of the community detection algorithms imbedded into igraph and makes them available to us, including *Edge-betweenness (group_edge_betweenness)*, *Leading eigenvector (group_leading_eigen)*, *Fast-greedy (group_fast_greedy)*, *Louvain (group_louvain)*, *Walktrap (group_walktrap)*, *Label propagation (group_label_prop)*, *InfoMAP (group_infomap)*, *Spinglass (group_spinglass)*, and *Optimal (group_optimal)*. Some community algorithms are designed to take into account direction or weight, while others ignore it. Use this [link](https://tidygraph.data-imaginist.com/reference/group_graph.html) to find out more about community detection functions provided by tidygraph,

In the code chunk below *group_edge_betweenness()* is used.

```{r}
g <- GAStech_graph %>%
  mutate(community = as.factor(
    group_edge_betweenness(
      weights = Weight, 
      directed = TRUE))) %>%
  ggraph(layout = "fr") + 
  geom_edge_link(
    aes(
      width=Weight), 
    alpha=0.2) +
  scale_edge_width(
    range = c(0.1, 5)) +
  geom_node_point(
    aes(colour = community))  

g + theme_graph()
```

In order to support effective visual investigation, the community network above has been revised by using [`geom_mark_hull()`](https://ggforce.data-imaginist.com/reference/geom_mark_hull.html) of [ggforce](https://ggforce.data-imaginist.com/) package.

::: callout-tip
## Important

Please be reminded that you must to install and include [**ggforce**](https://ggforce.data-imaginist.com/) and [**concaveman**](https://www.rdocumentation.org/packages/concaveman/versions/1.1.0/topics/concaveman) packages before running the code chunk below.
:::

```{r}
library(ggforce)
library(concaveman)
library(tidygraph)
library(ggraph)
library(tidyverse)
library(igraph)

g <- GAStech_graph %>%
  activate(nodes) %>%
  mutate(community = as.factor(
    group_optimal(weights = Weight)),
         betweenness_measure = centrality_betweenness()) %>%
  ggraph(layout = "fr") +
  geom_mark_hull(
    aes(x, y, 
        group = community, 
        fill = community),  
    alpha = 0.2,  
    expand = unit(0.3, "cm"),  # Expand
    radius = unit(0.3, "cm")  # Smoothness
  ) + 
  geom_edge_link(aes(width=Weight), 
                 alpha=0.2) +
  scale_edge_width(range = c(0.1, 5)) +
  geom_node_point(aes(fill = Department,
                      size = betweenness_measure),
                      color = "black",
                      shape = 21)
  
g + theme_graph()
```

# 9.8 Building Interactive Network Graph with visNetwork

-   [visNetwork()](http://datastorm-open.github.io/visNetwork/) is a R package for network visualization, using [vis.js](http://visjs.org/) javascript library.

-   *visNetwork()* function uses a nodes list and edges list to create an interactive graph.

    -   The nodes list must include an “id” column, and the edge list must have “from” and “to” columns.

    -   The function also plots the labels for the nodes, using the names of the actors from the “label” column in the node list.

-   The resulting graph is fun to play around with.

    -   You can move the nodes and the graph will use an algorithm to keep the nodes properly spaced.

    -   You can also zoom in and out on the plot and move it around to re-center it.

## 9.8.1 Data Preparation

Before we can plot the interactive network graph, we need to prepare the data model by using the code chunk below:

```{r}
GAStech_edges_aggregated <- GAStech_edges %>%
  left_join(GAStech_nodes, by = c("sourceLabel" = "label")) %>%
  rename(from = id) %>%
  left_join(GAStech_nodes, by = c("targetLabel" = "label")) %>%
  rename(to = id) %>%
  filter(MainSubject == "Work related") %>%
  group_by(from, to) %>%
    summarise(weight = n()) %>%
  filter(from!=to) %>%
  filter(weight > 1) %>%
  ungroup()
```

## 9.8.2 Plotting the first interactive network graph

The code chunk below will be used to plot an interactive network graph by using the data prepared.

```{r}
visNetwork(GAStech_nodes, 
           GAStech_edges_aggregated)
```

## 9.8.3 Working with layout

In the code chunk below, Fruchterman and Reingold layout is used.

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") 
```

## 9.8.4 Working with visual attributes - Nodes

visNetwork() looks for a field called “group” in the nodes object and colour the nodes according to the values of the group field.

The code chunk below rename Department field to group

```{r}
GAStech_nodes <- GAStech_nodes %>%
  rename(group = Department) 
```

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

## 9.8.5 Working with visual Attributes - Edges

In the code run below *visEdges()* is used to symbolise the edges.\
- The argument *arrows* is used to define where to place the arrow.\
- The *smooth* argument is used to plot the edges using a smooth curve.

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visEdges(arrows = "to", 
           smooth = list(enabled = TRUE, 
                         type = "curvedCW")) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

Visit [Option](http://datastorm-open.github.io/visNetwork/edges.html) to find out more about visEdges’s argument.

## 9.8.6 Interactivity

In the code chunk below, *visOptions()* is used to incorporate interactivity features in the data visualisation.

-   The argument *highlightNearest* highlights nearest when clicking a node.

-   The argument *nodesIdSelection* adds an id node selection creating an HTML select element.

```{r}
visNetwork(GAStech_nodes,
           GAStech_edges_aggregated) %>%
  visIgraphLayout(layout = "layout_with_fr") %>%
  visOptions(highlightNearest = TRUE,
             nodesIdSelection = TRUE) %>%
  visLegend() %>%
  visLayout(randomSeed = 123)
```

Visit [Option](http://datastorm-open.github.io/visNetwork/options.html) to find out more about visOption’s argument.

# 9.9 Building Circular Plots - Extra 

Generate random data using seed. There needs to be a character vector to represent categories, a numeric vector of x and y values.

```{r}
set.seed(999)
n = 1000
df = data.frame(sectors = sample(letters[1:8], n, replace = TRUE),
    x = rnorm(n), y = runif(n))
```

Next, the circular layout will be initialized. the circle is split into sectors based on the data range on x-axes in each category. In the following code, dfx is split by sectors and the width of the sectors are automatically calculated based on data ranges in each category. By default, sectors are positioned starting from teter = 0 (in the polar coordinate system) and go along the circle clockwise. No track has been added so there will be no display yet.

A global parameter *`track.height = 0.1`* is set by the option function `circis.par()` so that all tracks which will eb added have a default height of 0.1. The circle used by **circlize** always have a radius of 1, so a height of 0.1 means 10% of the circle radius.

The allocation of sectors only need values on x direction (or on the circular direction), the values on y direction (radical direction) will be used in the step of creating tracks.

After the circular layout is initialized, graphics can be added to the plot in a track-by-track manner. Before drawing anything, we need to know that all tracks should be first created by `circos.trackPlotRegion()` or, for short, `circos.track()`, then the low-level functions can be added afterwards. Just think in the base R graphic engine, you need first call `plot()` then you can use functions such as `points()` and `lines()` to add graphics. Since x-ranges for cells in the track have already been defined in the initialization step, here we only need to specify the y-range for each cell. The y-ranges can be specified by `y` argument as a numeric vector (so that y-range will be automatically extracted and calculated in each cell) or `ylim` argument as a vector of length two. In principle, y-ranges should be same for all cells in a same track

```{r}
library(circlize)
circos.clear()
circos.par("track.height" = 0.1)
circos.initialize(factors = df$sectors, x = df$x)

circos.track(df$sectors, y = df$y,
    panel.fun = function(x, y) {
        circos.text(CELL_META$xcenter, 
            CELL_META$cell.ylim[3] + mm_y(5), 
            CELL_META$sector.index)
        circos.axis(labels.cex = 0.6)
})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(df$sectors, df$x, df$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, "text", sector.index = "a", track.index = 1)
```

Next, axes are added by using `circos.axis()` inside `panel.fun`. `circos.track()` creates plotting region in a cell by cell manner and the `panel.fun` is actually executed immediately after the plotting region for a certain cell is created and adds graphics in the current cell. Without specifying any arguments, `circos.axis()` draws x-axes on the top of each cell.

`circos.text` CELL_META provides "meta information" for the current cell. When specifying the position of text on the y-direction, an offset of `mm_y(5)` 5mm is added to the y position of the text. In `circos.text`, x and y values are measured in the data coordinate and there are some helper functions that convert absolute units to corresponding values in data coordinate.

`circos.trackPoints()` add points in all cells simultaneously anc can be replaced by putting `circos.text()` in `panel.fun()`.

`circos.trackHist()` creates a new track. `bin.size` is set explicitly to that the bin size for all histograms are the same and can be compared to each other.

```{r}
library(circlize)
circos.clear()
circos.par("track.height" = 0.1)
circos.initialize(factors = df$sectors, x = df$x)

circos.track(df$sectors, y = df$y,
    panel.fun = function(x, y) {
        circos.text(CELL_META$xcenter, 
            CELL_META$cell.ylim[3] + mm_y(5), 
            CELL_META$sector.index)
        circos.axis(labels.cex = 0.6)
})
col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(df$sectors, df$x, df$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, "text", sector.index = "a", track.index = 1)
bgcol = rep(c("#EFEFEF", "#CCCCCC"), 4)
circos.trackHist(df$sectors, df$x, bin.size = 0.2, bg.col = bgcol, col = NA)
```

In the third track, `panel.fun`, 10 data points are randomly picked in each cell and sorted by x-values and connected with lines. In the following code, when `sectors` x and y arguments are set in `circos.track()`, x values and y values are split by sectos and corresponding subset of x and y values are sent to `panel.fun` through the x and y arguments.

```{r}
library(circlize)
circos.clear()
circos.par("track.height" = 0.1)
circos.initialize(factors = df$sectors, x = df$x)

circos.track(df$sectors, y = df$y,
    panel.fun = function(x, y) {
        circos.text(CELL_META$xcenter, 
            CELL_META$cell.ylim[3] + mm_y(5.5), 
            CELL_META$sector.index)
        circos.axis(labels.cex = 0.6)
})

col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(df$sectors, df$x, df$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, "text", sector.index = "a", track.index = 1)
bgcol = rep(c("#EFEFEF", "#CCCCCC"), 4)
circos.trackHist(df$sectors, df$x, bin.size = 0.2, bg.col = bgcol, col = NA)

circos.track(df$sectors, x = df$x, y = df$y,
    panel.fun = function(x, y) {
        ind = sample(length(x), 10)
        x2 = x[ind]
        y2 = y[ind]
        od = order(x2)
        circos.lines(x2[od], y2[od])
})
```

In the next plot, the second track is updated in the cell in sector "d". This is done by `circos.updatePlotRegion()` or the short version `circos.update` . The function erases grgaphics which have been added but cannot modify the xlim and ylim of the cell.

```{r}
library(circlize)
circos.clear()
circos.par("track.height" = 0.1)
circos.initialize(factors = df$sectors, x = df$x)

circos.track(df$sectors, y = df$y,
    panel.fun = function(x, y) {
        circos.text(CELL_META$xcenter, 
            CELL_META$cell.ylim[3] + mm_y(5.5), 
            CELL_META$sector.index)
        circos.axis(labels.cex = 0.6)
})

col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(df$sectors, df$x, df$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, "text", sector.index = "a", track.index = 1)
bgcol = rep(c("#EFEFEF", "#CCCCCC"), 4)
circos.trackHist(df$sectors, df$x, bin.size = 0.2, bg.col = bgcol, col = NA)

circos.track(df$sectors, x = df$x, y = df$y,
    panel.fun = function(x, y) {
        ind = sample(length(x), 10)
        x2 = x[ind]
        y2 = y[ind]
        od = order(x2)
        circos.lines(x2[od], y2[od])
})

circos.update(sector.index = "d", track.index = 2, 
    bg.col = "#FF8080", bg.border = "black")
circos.points(x = -2:2, y = rep(0.5, 5), col = "white")
circos.text(CELL_META$xcenter, CELL_META$ycenter, "updated", col = "white")
```

New tracks will be created and heatmaps added by using `circos.rect()`.

```{r}
library(circlize)
circos.clear()
circos.par("track.height" = 0.1)
circos.initialize(factors = df$sectors, x = df$x)

circos.track(df$sectors, y = df$y,
    panel.fun = function(x, y) {
        circos.text(CELL_META$xcenter, 
            CELL_META$cell.ylim[3] + mm_y(5.5), 
            CELL_META$sector.index)
        circos.axis(labels.cex = 0.6)
})

col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(df$sectors, df$x, df$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, "text", sector.index = "a", track.index = 1)
bgcol = rep(c("#EFEFEF", "#CCCCCC"), 4)
circos.trackHist(df$sectors, df$x, bin.size = 0.2, bg.col = bgcol, col = NA)

circos.track(df$sectors, x = df$x, y = df$y,
    panel.fun = function(x, y) {
        ind = sample(length(x), 10)
        x2 = x[ind]
        y2 = y[ind]
        od = order(x2)
        circos.lines(x2[od], y2[od])
})

circos.update(sector.index = "d", track.index = 2, 
    bg.col = "#FF8080", bg.border = "black")
circos.points(x = -2:2, y = rep(0.5, 5), col = "white")
circos.text(CELL_META$xcenter, CELL_META$ycenter, "updated", col = "white")

circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
    xlim = CELL_META$xlim
    ylim = CELL_META$ylim
    breaks = seq(xlim[1], xlim[2], by = 0.1)
    n_breaks = length(breaks)
    circos.rect(breaks[-n_breaks], rep(ylim[1], n_breaks - 1),
                breaks[-1], rep(ylim[2], n_breaks - 1),
                col = rand_color(n_breaks), border = NA)
})
```

In the most inside circle, links or ribbons are added using `circos.link`.

```{r}
library(circlize)
circos.clear()
circos.par("track.height" = 0.1)
circos.initialize(factors = df$sectors, x = df$x)

circos.track(df$sectors, y = df$y,
    panel.fun = function(x, y) {
        circos.text(CELL_META$xcenter, 
            CELL_META$cell.ylim[3] + mm_y(5.5), 
            CELL_META$sector.index)
        circos.axis(labels.cex = 0.6)
})

col = rep(c("#FF0000", "#00FF00"), 4)
circos.trackPoints(df$sectors, df$x, df$y, col = col, pch = 16, cex = 0.5)
circos.text(-1, 0.5, "text", sector.index = "a", track.index = 1)
bgcol = rep(c("#EFEFEF", "#CCCCCC"), 4)
circos.trackHist(df$sectors, df$x, bin.size = 0.2, bg.col = bgcol, col = NA)

circos.track(df$sectors, x = df$x, y = df$y,
    panel.fun = function(x, y) {
        ind = sample(length(x), 10)
        x2 = x[ind]
        y2 = y[ind]
        od = order(x2)
        circos.lines(x2[od], y2[od])
})

circos.update(sector.index = "d", track.index = 2, 
    bg.col = "#FF8080", bg.border = "black")
circos.points(x = -2:2, y = rep(0.5, 5), col = "white")
circos.text(CELL_META$xcenter, CELL_META$ycenter, "updated", col = "white")

circos.track(ylim = c(0, 1), panel.fun = function(x, y) {
    xlim = CELL_META$xlim
    ylim = CELL_META$ylim
    breaks = seq(xlim[1], xlim[2], by = 0.1)
    n_breaks = length(breaks)
    circos.rect(breaks[-n_breaks], rep(ylim[1], n_breaks - 1),
                breaks[-1], rep(ylim[2], n_breaks - 1),
                col = rand_color(n_breaks), border = NA)
})

circos.link("a", 0, "b", 0, h = 0.4)
circos.link("c", c(-0.5, 0.5), "d", c(-0.5,0.5), col = "red",
    border = "blue", h = 0.2)
circos.link("e", 0, "g", c(-1,1), col = "green", border = "black", lwd = 2, lty = 2)
```

To reset the graphic parameters, we can use `circos.clear()`.
