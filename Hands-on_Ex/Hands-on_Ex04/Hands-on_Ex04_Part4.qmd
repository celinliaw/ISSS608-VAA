---
title: "Hands on Exercise 4 Part 4: Funnel Plots for Fair Comparisons"
author: "Liaw Ying Ting, Celin"
date: 7 May 2025
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# 8.1 Overview

Funnel Plot is specially designed data visualisation for conducting unbiased comparison between outlets, stores or business entities. This hands-on exercise will help to practice on:

-   plotting funnel plots using **funnelPlotR package**

-   plottiing static funnel plot by using ggplot2 package

-   plotting interactive funnel plot by using both **plotly R and ggplot2** packages

# 8.2 Installing and Launching R Packages

```{r}
pacman::p_load(tidyverse, FunnelPlotR, plotly, knitr)
```

# 8.3 Importing Data

In this exercise, the cumulative COVID-19 cases and death by sub-district as at 31st July 2021, DKI Jakarta.

The code chunk below imports the data into R and save it into a tibble data frame object called *covid19.*

```{r}
covid19 <- read_csv("COVID-19_DKI_Jakarta.csv") %>%
  mutate_if(is.character, as.factor)
```

# 8.4 FunnelPlotR Methods

**FunnelPlotR** uses ggplot to generate funnel plots. It requires a numerator (events of interest), denominator (population to be considered) and group. The key arguments selected for customisation are:

-   limit - plot limits (95 or 99)

-   label_outliers - to label outliers (true or false)

-   Poisson_limits - to add poisson limits to the plot

-   OD_adjust - to add overdispersed limits to the plot

-   xrange and yrange - to specify the range to display for the axes

## 8.4.1 FunnelPlotR Methods: The Basic Plot

```{r}
funnel_plot(
  .data = covid19,
  numerator = Positive,
  denominator = Death,
  group = `Sub-district`
)
```

## 8.4.2 FunnelPlotR Methods: Makeover 1

```{r}
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",     #<<
  xrange = c(0, 6500),  #<<
  yrange = c(0, 0.05)   #<<
)
```

## 8.4.3 FunnelPlotR Methods: Makeover 2

```{r}
funnel_plot(
  .data = covid19,
  numerator = Death,
  denominator = Positive,
  group = `Sub-district`,
  data_type = "PR",   
  x_range = c(0, 6500),  
  y_range = c(0, 0.05),
  label = NA,
  title = "Cumulative COVID-19 Fatality Rate by Cumulative \n Total Number of COVID-19 Positive Cases", #<<           
  x_label = "Cumulative COVID-19 Positive Cases", #<<
  y_label = "Cumulative Fatality Rate"  #<<
) 
```

# 8.5 Funnel Plot for Fair Visual Comparison: ggplot2 methods

## 8.5.1 Computing the basic derived fields

```{r}
df <- covid19 %>%
  mutate(rate = Death / Positive) %>%
  mutate(rate.se = sqrt((rate*(1-rate)) / (Positive))) %>%
  filter(rate > 0)
```

```{r}
fit.mean <- weighted.mean(df$rate, 1/df$rate.se^2)
```

## 8.5.2 Calculate lower and upper limits for 95% and 99.9% CI

```{r}
number.seq <- seq(1, max(df$Positive), 1)
number.ll95 <- fit.mean - 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul95 <- fit.mean + 1.96 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ll999 <- fit.mean - 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
number.ul999 <- fit.mean + 3.29 * sqrt((fit.mean*(1-fit.mean)) / (number.seq)) 
dfCI <- data.frame(number.ll95, number.ul95, number.ll999, 
                   number.ul999, number.seq, fit.mean)
```

## 8.5.3 Plotting a static funnel plot

```{r}
p <- ggplot(df, aes(x = Positive, y = rate)) +
  geom_point(aes(label=`Sub-district`), 
             alpha=0.4) +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul95), 
            size = 0.4, 
            colour = "grey40", 
            linetype = "dashed") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ll999), 
            size = 0.4, 
            colour = "grey40") +
  geom_line(data = dfCI, 
            aes(x = number.seq, 
                y = number.ul999), 
            size = 0.4, 
            colour = "grey40") +
  geom_hline(data = dfCI, 
             aes(yintercept = fit.mean), 
             size = 0.4, 
             colour = "grey40") +
  coord_cartesian(ylim=c(0,0.05)) +
  annotate("text", x = 1, y = -0.13, label = "95%", size = 3, colour = "grey40") + 
  annotate("text", x = 4.5, y = -0.18, label = "99%", size = 3, colour = "grey40") + 
  ggtitle("Cumulative Fatality Rate by Cumulative Number of COVID-19 Cases") +
  xlab("Cumulative Number of COVID-19 Cases") + 
  ylab("Cumulative Fatality Rate") +
  theme_light() +
  theme(plot.title = element_text(size=12),
        legend.position = c(0.91,0.85), 
        legend.title = element_text(size=7),
        legend.text = element_text(size=7),
        legend.background = element_rect(colour = "grey60", linetype = "dotted"),
        legend.key.height = unit(0.3, "cm"))
p
```

## 8.5.4 Interactive Funnel Plot: plotly + ggplot2

The funnel plot created using ggplot2 functions can be made interactive with **ggplotly()** of plotly r package.

```{r}
fp_ggplotly <- ggplotly(p,
  tooltip = c("label", 
              "x", 
              "y"))
fp_ggplotly
```

# 8.6 Additional Plots

## 8.6.1 Using Infer R Package

This package is to perform statistical inference using an expressive statistical grammar that coheres with the tidyverse design framework. There are 4 main verbs that can be used to utilizes to visualize and extract value from their outputs.

```{r}
str(covid19)
```

## 8.6.2 One numerical Variable (Standardised mean t-test)

A hypothesis test is created for whether the **mean fatality rate differs from fixed value,** say 0.01(1%) using a **one sample t-test approach**.

```{r}
# Load required packages
pacman::p_load(tidyverse, infer)

# Load and clean data
covid19 <- read_csv("COVID-19_DKI_Jakarta.csv") %>%
  filter(!is.na(Positive), Positive > 0,
         !is.na(Death), Death >= 0) %>%
  mutate(fatality_rate = Death / Positive)

# Step 1: Specify the variable of interest
spec_data <- covid19 %>%
  specify(response = fatality_rate)

# Step 2: State the null hypothesis (mean fatality rate is 0.01)
hyp_data <- spec_data %>%
  hypothesize(null = "point", mu = 0.01)

# Step 3: Generate 1000 samples under the null
gen_data <- hyp_data %>%
  generate(reps = 1000, type = "bootstrap")

# Step 4: Calculate the test statistic (mean)
null_dist <- gen_data %>%
  calculate(stat = "mean")

# Step 5: Calculate the observed statistic
obs_stat <- spec_data %>%
  calculate(stat = "mean")

# Step 6: Visualize with p-value shaded
visualize(null_dist) +
  shade_p_value(obs_stat = obs_stat, direction = "two-sided")

```

```{r}
null_dist %>%
  get_p_value(obs_stat = obs_stat, direction = "greater")

```

-   The **observed mean (1.6%)** is **far outside** the distribution you'd expect **if the true mean were 1%**.

-   Since the red line lies **way in the right tail**, this suggests that your observed result is **very unlikely under the null hypothesis**.

-   Therefore, this provides **strong evidence against the null hypothesis**.

-   Since p = 0, we will reject the null hypothesis and that mean fatality rate is significantly greater than 1%

## 8.6.3 Alternative: Theorey-Based Null Distribution

Alternatively, we can visualise it using the observed statistic using the theory-based null distribution: **Is the mean fatality rate significantly different from 1% using a theoretical t-distribution?**

```{r}
# Load required packages
pacman::p_load(tidyverse, infer)

# Load and clean data
covid19 <- read_csv("COVID-19_DKI_Jakarta.csv") %>%
  filter(!is.na(Positive) & Positive > 0,
         !is.na(Death) & Death >= 0) %>%
  mutate(fatality_rate = Death / Positive)

# 1. Specify variable
spec_data <- covid19 %>%
  specify(response = fatality_rate)

# 2. Hypothesize that the population mean = 0.01
hyp_data <- spec_data %>%
  hypothesize(null = "point", mu = 0.01)

# 3. Calculate the t-statistic under the theory-based null
obs_t_stat <- hyp_data %>%
  calculate(stat = "t")

# 4. Visualize with theoretical distribution
visualize(hyp_data, method = "theoretical") +
  shade_p_value(obs_stat = obs_t_stat, direction = "two-sided")


```

**Observations from plot:**

-   Your observed t-statistic is **far outside the expected range** under the null hypothesis.

-   The **probability of getting a t-stat this extreme by chance is effectively zero**.

-   This provides **overwhelming evidence against the null hypothesis**.

## 8.6.4 Two Categorical Chi Square test of independence

**Is there a relationship between City and Number of Deaths?**

Ho: There is no association between City and Number of Deaths

H1: There is an association between City and Number of Deaths

```{r}
# Load required packages
pacman::p_load(tidyverse, infer)

# Load and prepare the dataset
covid19 <- read_csv("COVID-19_DKI_Jakarta.csv") %>%
  filter(!is.na(City), !is.na(Death)) %>%
  mutate(City = as.factor(City),
         death_bin = cut(Death,
                         breaks = c(-1, 10, 50, 150, Inf),
                         labels = c("Very Low", "Low", "Medium", "High")))

# Observed Chi-squared statistic
Chisq_hat <- covid19 %>%
  specify(City ~ death_bin) %>%
  hypothesize(null = "independence") %>%
  calculate(stat = "Chisq")

# Null distribution via permutation
null_dist <- covid19 %>%
  specify(City ~ death_bin) %>%
  hypothesize(null = "independence") %>%
  generate(reps = 1000, type = "permute") %>%
  calculate(stat = "Chisq")

# Plot 1: Simulation-based null distribution
visualize(null_dist) +
  shade_p_value(obs_stat = Chisq_hat, direction = "greater")

```

Alternatively, visualising the observed statistic using the theory-based null distribution

```{r}
# Theoretical null distribution
null_dist_theory <- covid19 %>%
  specify(City ~ death_bin) %>%
  assume(distribution = "Chisq")

# Plot 2: Theoretical chi-square distribution
visualize(null_dist_theory) +
  shade_p_value(obs_stat = Chisq_hat, direction = "greater")

```

The observed statistic using both the null distributions

```{r}
# Load packages
pacman::p_load(tidyverse, infer)

# Load and prepare data
covid19 <- read_csv("COVID-19_DKI_Jakarta.csv") %>%
  filter(!is.na(City), !is.na(Death)) %>%
  mutate(City = as.factor(City),
         death_bin = cut(Death,
                         breaks = c(-1, 10, 50, 150, Inf),
                         labels = c("Very Low", "Low", "Medium", "High")))

# 1. Observed Chi-squared statistic
Chisq_hat <- covid19 %>%
  specify(City ~ death_bin) %>%
  hypothesize(null = "independence") %>%
  calculate(stat = "Chisq")

# 2. Null distribution via permutation
null_dist <- covid19 %>%
  specify(City ~ death_bin) %>%
  hypothesize(null = "independence") %>%
  generate(reps = 1000, type = "permute") %>%
  calculate(stat = "Chisq")

# 3. Combined simulation + theory plot
visualize(null_dist, method = "both") +
  shade_p_value(obs_stat = Chisq_hat, direction = "greater")

```

Calculate the P-Value

```{r}
# 4. Calculate the p-value
null_dist %>%
  get_p_value(obs_stat = Chisq_hat, direction = "greater")
```

Observations from plots:

-   Your observed Chi-square value is **far beyond** what is expected under the null hypothesis of independence

-   The **simulation and theory both agree**: this is **extremely unlikely** to happen by chance.

-   This means there **is a statistically significant relationship** between **City** and **Death level**.

-   Since p-value = 0, we will reject the null hypothesis.
